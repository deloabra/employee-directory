{"version":3,"sources":["utils/API.js","components/EmployeeCard.js","components/Header.js","components/SortForm.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeCard","props","className","src","alt","firstName","lastName","email","phone","Header","SortForm","employeeList","location","useLocation","to","pathname","App","useState","employees","setEmployees","useEffect","API","then","result","data","results","catch","err","console","log","getGender","gender","filter","employee","exact","path","component","map","key","name","first","last","picture","medium","arr","slice","sort","emp1","emp2","localeCompare","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5dea0e31.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n  // Gets all users\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n  }\n};","import React from \"react\";\nimport \"./css/EmployeeCard.css\"\n\n//display first name, last name, email, phone number, picture\nfunction EmployeeCard(props){\n    return (\n    <div>\n        <div className=\"employeeCard row\">\n            <span className=\"col-lg-3 col-md-6\"><img src={props.src} alt={props.firstName}></img></span>\n            <p className=\"col-lg-3 col-md-6\"><span className=\"employeeInfo\">{props.firstName} {props.lastName}</span></p>\n            <p className=\"col-lg-3 col-md-6\"><span className=\"employeeInfo\">{props.email}</span></p>\n            <p className=\"col-lg-3 col-md-6\"><span className=\"employeeInfo\">{props.phone}</span></p>\n        </div>\n        <hr></hr>\n    </div>\n    );\n}\n\nexport default EmployeeCard;","import React from \"react\";\n\nfunction Header(){\n    return (\n        <div className=\"jumbotron jumbotron-fluid bg-success\">\n            <div className=\"container\">\n                <h1 className=\"display-4 text-white text-center\">Employee Directory</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport \"./css/SortForm.css\";\n\nfunction SortForm(){\n\n    const location = useLocation();\n\n    return (\n        <div className=\"jumbotron\">\n            <div className=\"container d-flex justify-content-around flex-wrap\">\n                    <Link to=\"/employee-directory\">\n                        <button className={location.pathname === \"/employee-directory\" ? \"btn btn-warning\" : \"btn btn-success\"}>\n                            Default\n                        </button>\n                    </Link>\n                    <Link to=\"/employee-directory/male\">\n                        <button className={location.pathname === \"/employee-directory/male\" ? \"btn btn-warning\" : \"btn btn-success\"}>\n                            Filter for Men\n                        </button>\n                    </Link>\n                    <Link to=\"/employee-directory/female\">\n                        <button className={location.pathname === \"/employee-directory/female\" ? \"btn btn-warning\" : \"btn btn-success\"}>\n                            Filter for Women\n                        </button>\n                    </Link>\n                    <Link to=\"/employee-directory/sort\">\n                        <button className={location.pathname === \"/employee-directory/sort\" ? \"btn btn-warning\" : \"btn btn-success\"}>\n                            Sort Alphabetically\n                        </button>\n                    </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default SortForm;","import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport API from \"./utils/API\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Header from \"./components/Header\";\nimport SortForm from \"./components/SortForm\";\n\n//employeeList gets filled and then doesn't change after that\nvar employeeList;\n\nfunction App(){\n\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    API.getUsers()\n    .then((result) => employeeList = result.data.results)\n    .then(() => setEmployees(employeeList))\n    .catch(err => console.log(err));\n  }, []);\n\n  //filter by gender\n  const getGender = (gender) => {\n    return employees.filter((employee) => employee.gender === gender);\n  }\n\n  //sort by alphabet\n  const alphabetize = (arr) => {\n    let temp = arr.slice();\n    return temp.sort((emp1, emp2) => emp1.name.last.localeCompare(emp2.name.last));\n  }\n\n  const defaultSort = () => (employees.map(employee => <EmployeeCard key={employee.name.first+employee.name.last} firstName={employee.name.first} lastName={employee.name.last}\n    email={employee.email} phone={employee.phone} src={employee.picture.medium}/>));\n\n  const maleSort = () => (getGender(\"male\").map(employee => <EmployeeCard key={employee.name.first+employee.name.last} firstName={employee.name.first} lastName={employee.name.last}\n    email={employee.email} phone={employee.phone} src={employee.picture.medium}/>));\n\n  const femaleSort = () => (getGender(\"female\").map(employee => <EmployeeCard key={employee.name.first+employee.name.last} firstName={employee.name.first} lastName={employee.name.last}\n    email={employee.email} phone={employee.phone} src={employee.picture.medium}/>));\n\n  const alphaSort = () => (alphabetize(employees).map(employee => <EmployeeCard key={employee.name.first+employee.name.last} firstName={employee.name.first} lastName={employee.name.last}\n    email={employee.email} phone={employee.phone} src={employee.picture.medium}/>));\n\n  return(\n    <Router>\n    <div className=\"bg-dark\">\n      <Header/>\n      <div className=\"container\">\n        <SortForm/>\n\n        <Route exact path=\"/employee-directory\" component={defaultSort}/>\n        <Route exact path=\"/employee-directory/male\" component={maleSort}/>\n        <Route exact path=\"/employee-directory/female\" component={femaleSort}/>\n        <Route exact path=\"/employee-directory/sort\" component={alphaSort}/>\n\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}